//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/raincontrol.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Raincontrol : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Raincontrol()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""raincontrol"",
    ""maps"": [
        {
            ""name"": ""Particle"",
            ""id"": ""c6fb3287-bdb2-49a5-839d-d79832705558"",
            ""actions"": [
                {
                    ""name"": ""Effect"",
                    ""type"": ""Button"",
                    ""id"": ""bcefdb9f-97a0-4279-b5c9-7a925bb9b5e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""059c8341-b4a2-4422-9331-fb1a90fc7ccf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Effect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Particle
        m_Particle = asset.FindActionMap("Particle", throwIfNotFound: true);
        m_Particle_Effect = m_Particle.FindAction("Effect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Particle
    private readonly InputActionMap m_Particle;
    private IParticleActions m_ParticleActionsCallbackInterface;
    private readonly InputAction m_Particle_Effect;
    public struct ParticleActions
    {
        private @Raincontrol m_Wrapper;
        public ParticleActions(@Raincontrol wrapper) { m_Wrapper = wrapper; }
        public InputAction @Effect => m_Wrapper.m_Particle_Effect;
        public InputActionMap Get() { return m_Wrapper.m_Particle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParticleActions set) { return set.Get(); }
        public void SetCallbacks(IParticleActions instance)
        {
            if (m_Wrapper.m_ParticleActionsCallbackInterface != null)
            {
                @Effect.started -= m_Wrapper.m_ParticleActionsCallbackInterface.OnEffect;
                @Effect.performed -= m_Wrapper.m_ParticleActionsCallbackInterface.OnEffect;
                @Effect.canceled -= m_Wrapper.m_ParticleActionsCallbackInterface.OnEffect;
            }
            m_Wrapper.m_ParticleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Effect.started += instance.OnEffect;
                @Effect.performed += instance.OnEffect;
                @Effect.canceled += instance.OnEffect;
            }
        }
    }
    public ParticleActions @Particle => new ParticleActions(this);
    public interface IParticleActions
    {
        void OnEffect(InputAction.CallbackContext context);
    }
}
